swagger: "2.0"
info:
  description: "This is a Swagger YAML description of the backend API"
  version: 0.1.1
  title: Swagger Backend API
host: localhost
basePath: /api/v1
tags:
  - name: login
    description: Login operation
  - name: users
    description: Operations about isers
  - name: assets
    description: Operations about assets
  - name: schools
    description: Operations about schools
  - name: teachers
    description: Operations about teachers
schemes:
  - http
paths:
  /login:
    post:
      tags:
        - login
      summary: Login to the API
      consumes: 
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Login JSON with "email" and "password" fields
          required: true
          schema: 
            $ref: "#/definitions/Login"
      responses:
        "401":
          description: Unauthorized
  /users:
    get:
      tags:
        - users
      summary: Get all users
      x-swagger-router-controller: controllers/userController
      operationId: getUsers
      produces:
        - application/json
      responses: 
        "200":
          description: Successful operation
          schema:
            type: array
            items: 
              $ref: "#/definitions/User"
      security:
        - backend_auth:
          - "read"
    post:
      tags:
        - users
      summary: Create a new user
      operationId: addUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters: 
        - in: body
          name: body
          description: User object to add
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "400":
          description: Invalid input
      security:
        - backend_auth:
          - "write"
  "/users/{UID}":
    get:
      tags:
        - users
      summary: Find user by UID
      description: Returns a single user
      operationId: getSingleUser
      produces:
        - application/json
      parameters:
        - in: path
          name: UID
          description: UID of user to return
          required: true
          type: string
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: "#/definitions/User"
        "404":
          description: User not found
      security:
        - backend_auth:
          - "read"
    put:
      tags:
        - users
      summary: Update user
      operationId: updateUser
      consumes: 
        - application/json
      produces:
        - application/json
      parameters:
        - name: UID
          in: path
          description: UID of user to update
          required: true
          type: string
        - in: body
          name: body
          description: User object to add
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: "#/definitions/User"
        "400":
          description: Invalid input
        "404":
          description: User not found
      security:
        - backend_auth:
          - "write"
    delete:
      tags:
        - users
      summary: Delete an user
      operationId: deleteUser
      produces:
        - application/json
      parameters:
        - name: UID
          in: path
          description: UID of user to update
          required: true
          type: string
      responses:
        "204":
          description: Successful operation
          schema:
            $ref: "#/definitions/User"
        "404":
          description: User not found
      security:
        - backend_auth:
          - "write"
  /assets:
    get:
      tags:
        - assets
      summary: Get all assets
      x-swagger-router-controller: controllers/assetsController
      operationId: getAssets
      produces:
        - application/json
      responses: 
        "200":
          description: Successful operation
          schema:
            type: array
            items: 
              $ref: "#/definitions/Asset"
      security:
        - backend_auth:
          - "read"
    post:
      tags:
        - assets
      summary: Create a new asset
      operationId: addAsset
      consumes:
        - application/json
      produces:
        - application/json
      parameters: 
        - in: body
          name: body
          description: Asset object to add
          required: true
          schema:
            $ref: "#/definitions/Asset"
      responses:
        "400":
          description: Invalid input
      security:
        - backend_auth:
          - "write"
  "/assets/{UID}":
    get:
      tags:
        - assets
      summary: Find asset by UID
      description: Returns a single asset
      operationId: getSingleAsset
      produces:
        - application/json
      parameters:
        - in: path
          name: UID
          description: UID of asset to return
          required: true
          type: string
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: "#/definitions/Asset"
        "404":
          description: Asset not found
      security:
        - backend_auth:
          - "read"
    put:
      tags:
        - assets
      summary: Update asset
      operationId: updateAsset
      consumes: 
        - application/json
      produces:
        - application/json
      parameters:
        - name: UID
          in: path
          description: UID of asset to update
          required: true
          type: string
        - in: body
          name: body
          description: Asset object to add
          required: true
          schema:
            $ref: "#/definitions/Asset"
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: "#/definitions/Asset"
        "400":
          description: Invalid input
        "404":
          description: Asset not found
      security:
        - backend_auth:
          - "write"
    delete:
      tags:
        - assets
      summary: Delete an asset
      operationId: deleteAsset
      produces:
        - application/json
      parameters:
        - name: UID
          in: path
          description: UID of asset to update
          required: true
          type: string
      responses:
        "204":
          description: Successful operation
          schema:
            $ref: "#/definitions/Asset"
        "404":
          description: Asset not found
      security:
        - backend_auth:
          - "write"
  /schools:
    get:
      tags:
        - schools
      summary: Get all schools
      x-swagger-router-controller: controllers/schoolController
      operationId: getSchools
      produces:
        - application/json
      responses: 
        "200":
          description: Successful operation
          schema:
            type: array
            items: 
              $ref: "#/definitions/School"
      security:
        - backend_auth:
          - "read"
    post:
      tags:
        - schools
      summary: Create a new school
      operationId: addSchool
      consumes:
        - application/json
      produces:
        - application/json
      parameters: 
        - in: body
          name: body
          description: School object to add
          required: true
          schema:
            $ref: "#/definitions/School"
      responses:
        "400":
          description: Invalid input
      security:
        - backend_auth:
          - "write"
  "/schools/{UID}":
    get:
      tags:
        - schools
      summary: Find school by UID
      description: Returns a single school
      operationId: getSingleSchool
      produces:
        - application/json
      parameters:
        - in: path
          name: UID
          description: UID of school to return
          required: true
          type: string
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: "#/definitions/School"
        "404":
          description: School not found
      security:
        - backend_auth:
          - "read"
    put:
      tags:
        - schools
      summary: Update school
      operationId: updateSchool
      consumes: 
        - application/json
      produces:
        - application/json
      parameters:
        - name: UID
          in: path
          description: UID of school to update
          required: true
          type: string
        - in: body
          name: body
          description: School object to add
          required: true
          schema:
            $ref: "#/definitions/School"
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: "#/definitions/School"
        "400":
          description: Invalid input
        "404":
          description: School not found
      security:
        - backend_auth:
          - "write"
    delete:
      tags:
        - schools
      summary: Delete a school
      operationId: deleteSchool
      produces:
        - application/json
      parameters:
        - name: UID
          in: path
          description: UID of school to update
          required: true
          type: string
      responses:
        "204":
          description: Successful operation
          schema:
            $ref: "#/definitions/School"
        "404":
          description: School not found
      security:
        - backend_auth:
          - "write"
  /teachers:
    get:
      tags:
        - teachers
      summary: Get all teachers
      x-swagger-router-controller: controllers/teacherController
      operationId: getTeachers
      produces:
        - application/json
      responses: 
        "200":
          description: Successful operation
          schema:
            type: array
            items: 
              $ref: "#/definitions/Teacher"
      security:
        - backend_auth:
          - "read"
    post:
      tags:
        - teachers
      summary: Create a new teacher
      operationId: addTeacher
      consumes:
        - application/json
      produces:
        - application/json
      parameters: 
        - in: body
          name: body
          description: Teacher object to add
          required: true
          schema:
            $ref: "#/definitions/Teacher"
      responses:
        "400":
          description: Invalid input
      security:
        - backend_auth:
          - "write"
  "/teachers/{UID}":
    get:
      tags:
        - teachers
      summary: Find teacher by UID
      description: Returns a single teacher
      operationId: getSingleTeacher
      produces:
        - application/json
      parameters:
        - in: path
          name: UID
          description: UID of teacher to return
          required: true
          type: string
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: "#/definitions/Teacher"
        "404":
          description: Teacher not found
      security:
        - backend_auth:
          - "read"
    put:
      tags:
        - teachers
      summary: Update teacher
      operationId: updateTeacher
      consumes: 
        - application/json
      produces:
        - application/json
      parameters:
        - name: UID
          in: path
          description: UID of teacher to update
          required: true
          type: string
        - in: body
          name: body
          description: Teacher object to add
          required: true
          schema:
            $ref: "#/definitions/Teacher"
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: "#/definitions/Teacher"
        "400":
          description: Invalid input
        "404":
          description: Teacher not found
      security:
        - backend_auth:
          - "write"
    delete:
      tags:
        - teachers
      summary: Delete a teacher
      operationId: deleteTeacher
      produces:
        - application/json
      parameters:
        - name: UID
          in: path
          description: UID of teacher to update
          required: true
          type: string
      responses:
        "204":
          description: Successful operation
          schema:
            $ref: "#/definitions/Teacher"
        "404":
          description: Teacher not found
      security:
        - backend_auth:
          - "write"
securityDefinitions:
  backend_auth:
    type: oauth2
    authorizationUrl: "http://localhost/login"
    flow: implicit
    scopes: 
      "read": read anything
      "write": write anything
definitions:
  Login:
    properties:
      email:
        type: string
      password:
        type: string 
  User:
    properties:
      email:
        type: string
      password:
        type: string
  Asset:
    properties:
      name:
        type: string
  TeacherSuggestionRequest:
    properties:
      forename:
        type: string
      lastname:
        type: string
      prefix:
        type: string
      suffix:
        type: string
      schoolUid:
        type: string
  TeacherRatingCategory:
    properties:
      categoryType:
        type: string
      title:
        type: string
      description:
        type: string
      order:
        type: integer
      rating:
        type: integer
  Teacher:
    properties:
      forename:
        type: string
      lastname:
        type: string
      prefix:
        type: string
      suffix:
        type: string
      rating:
        type: integer
      ratingCount:
        type: integer
      ownRating:
        type: integer
      ratingCategories:
        type: array
        $ref: "#/definitions/TeacherRatingCategory"
  SchoolSuggestionRequest:
    properties:
      name:
        type: string
      street:
        type: string
      postcode:
        type: string
      place:
        type: string
      countryCode:
        type: string
      website:
        type: string
      phone:
        type: string
      teachers: 
        type: array
        $ref: "#/definitions/TeacherSuggestionRequest"
  SchoolRatingCategory:
    properties:
      categoryType:
        type: string
      title:
        type: string
      order:
        type: integer
      rating:
        type: integer
  School:
    properties:
      name:
        type: string
      street:
        type: string
      address:
        type: string
      countryCode:
        type: string
      rating:
        type: integer
      ratingCount:
        type: integer
      ownRating:
        type: integer
      isSelectedSchool:
        type: integer
      ratingCategories:
        type: array
        $ref: "#/definitions/SchoolRatingCategory"
      categoryType:
        type: string
      title:
        type: string
      order:
        type: integer
